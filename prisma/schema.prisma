// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SearchResults {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  id                       String  @id @default(uuid())
  title                    String?
  abstract                 String?
  date                     String?
  keywords                 String? // (";" separated entries)
  doi                      String?
  sourceDatabase           String?
  identifierInSource       String?
  originalJson             Json?
  searchId                 String?
  itemPositionWithinSearch Int?

  // Relations
  SearchResults_Deduplicated SearchResults_Deduplicated[]
  filledItemsMain            FilledItems[]                @relation("MainSourceRelation")
  filledItemsMatched         FilledItems[]                @relation("MatchedItemRelation")
}

model FilledItems {
  id            String  @id @default(uuid())
  mainSourceId  String?
  matchedItemId String?

  // Relations
  mainSource  SearchResults? @relation("MainSourceRelation", fields: [mainSourceId], references: [id])
  matchedItem SearchResults? @relation("MatchedItemRelation", fields: [matchedItemId], references: [id])
}

model SearchResults_Deduplicated {
  id String @id @default(uuid())

  searchResultsId String?
  deduplicatedId  String?

  // Relations
  SearchResults SearchResults? @relation(fields: [searchResultsId], references: [id])
  Deduplicated  Deduplicated?  @relation(fields: [deduplicatedId], references: [id])
}

model Deduplicated {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  id                String   @id @default(uuid())
  title             String?
  abstract          String?
  keywords          String?
  doi               String?
  date              String?
  otherIdentifier   String?
  flag              String?
  item_ids          String[] @default([])
  number_of_sources Int      @default(0)
  average_rank      Float    @default(0)

  // Relations
  screening                  Screening?
  SearchResults_Deduplicated SearchResults_Deduplicated[]
}

model Screening {
  id String @id @default(uuid())

  screeningUUID     String
  resultOfScreening Json

  // Relations
  deduplicatedId       String?               @unique
  deduplicated         Deduplicated?         @relation(fields: [deduplicatedId], references: [id])
  ScreeningInformation ScreeningInformation?
}

model ScreeningInformation {
  id String @id @default(uuid())

  screeningUUID String
  screeningInfo Json

  // Relations
  screeningId String    @unique
  screening   Screening @relation(fields: [screeningId], references: [id])
}

// model SearchInformation {
//   id                String @id @default(uuid())
//   searchDescription String?
//   filters           Json?
//   database          String?
//   searchId          String
// }
